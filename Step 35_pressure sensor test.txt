import lgpio  # Use lgpio instead of RPi.GPIO
import time
import matplotlib.pyplot as plt

# Define MCP3008 pin connections
SPICLK = 11  # GPIO11 - SCLK
SPIMISO = 9  # GPIO9 - MISO
SPIMOSI = 10  # GPIO10 - MOSI
SPICS = 8  # GPIO8 - CS

# Initialize GPIO handle
h = lgpio.gpiochip_open(0)  # Open gpiochip0

# Set GPIO pin modes
lgpio.gpio_claim_output(h, SPICS)
lgpio.gpio_claim_output(h, SPICLK)
lgpio.gpio_claim_output(h, SPIMOSI)
lgpio.gpio_claim_input(h, SPIMISO)

# Initialize data storage lists to store all data points
x_data = []  # List for storing time data
y_data = []  # List for storing pressure sensor ADC values

# Function to read from the MCP3008 on a specific channel
def read_adc(adcnum, clockpin, mosipin, misopin, cspin):
    if adcnum > 7 or adcnum < 0:
        return -1

    lgpio.gpio_write(h, cspin, 1)
    lgpio.gpio_write(h, clockpin, 0)  # Start clock signal low
    lgpio.gpio_write(h, cspin, 0)  # Start communication by pulling CS low

    commandout = adcnum
    commandout |= 0x18  # Start bit + single-ended bit
    commandout <<= 3  # Send 5-bit command
    for i in range(5):
        if commandout & 0x80:
            lgpio.gpio_write(h, mosipin, 1)
        else:
            lgpio.gpio_write(h, mosipin, 0)
        commandout <<= 1
        lgpio.gpio_write(h, clockpin, 1)
        lgpio.gpio_write(h, clockpin, 0)

    adcout = 0
    # Read one null bit and 10 ADC bits
    for i in range(12):
        lgpio.gpio_write(h, clockpin, 1)
        lgpio.gpio_write(h, clockpin, 0)
        adcout <<= 1
        if lgpio.gpio_read(h, misopin):
            adcout |= 0x1

    lgpio.gpio_write(h, cspin, 1)

    adcout >>= 1  # Drop the first null bit
    return adcout

# Initialize plot
plt.ion()  # Turn on interactive mode
fig, ax = plt.subplots()
line, = ax.plot([], [], 'o')  # Change to point plot using 'o'
ax.set_ylim(0, 500)  # Set Y-axis range for ADC values from 0 to 500

def update_plot(x, y):
    line.set_xdata(x)
    line.set_ydata(y)
    ax.relim()  # Recompute the limits of the axes
    ax.autoscale_view()  # Rescale the plot view to include new data
    plt.draw()
    plt.pause(0.01)

try:
    start_time = time.time()  # Record start time
    while True:
        # Read value from channel 0 (pressure sensor)
        sensor_value = read_adc(0, SPICLK, SPIMOSI, SPIMISO, SPICS)  # Raw ADC value
        current_time = time.time() - start_time  # Calculate current time

        # Append new data to lists
        x_data.append(current_time)
        y_data.append(sensor_value)

        # Update the plot
        update_plot(x_data, y_data)

        print(f"Time: {current_time:.2f} seconds, Pressure Sensor Value: {sensor_value}")

        time.sleep(0.1)  # Read every 0.1 seconds

except KeyboardInterrupt:
    lgpio.gpiochip_close(h)  # Clean up all GPIO pin settings
    print("Program stopped.")

finally:
    plt.ioff()  # Turn off interactive mode
    plt.close(fig)  # Ensure the plot window is closed
    plt.show()
