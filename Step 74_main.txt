# main.py

import threading
import time
import datetime
import os
import signal

from pressure_sensor import PressureMonitor
from led_control import LEDControl
from fingerprint_sensor import FingerprintSensor
from image_capture import ImageCapture
from s3_upload import S3Uploader
from cleanup import cleanup_resources
from plot_graph import PressureGraph  # Import PressureGraph

# Global events
stop_event = threading.Event()
capturing_event = threading.Event()        # Controls when image capturing should start
fingerprint_active_event = threading.Event()  # Controls fingerprint sensor activation

def signal_handler(sig, frame):
    print("Signal received. Cleaning up...")
    stop_event.set()
    led_control.turn_off()  # Ensure LEDs are turned off immediately
    cleanup_resources(led_control, pressure_monitor)
    os._exit(0)

def main():
    global led_control
    global pressure_monitor

    signal.signal(signal.SIGINT, signal_handler)

    # Shared data for plotting
    x_data = []
    y_data = []
    led_off_countdown = [0]

    # Initialize components
    led_control = LEDControl()
    pressure_monitor = PressureMonitor(
        stop_event, capturing_event, fingerprint_active_event, led_control, x_data, y_data, led_off_countdown
    )
    fingerprint_sensor = FingerprintSensor(stop_event, fingerprint_active_event)
    image_capture = ImageCapture(stop_event, capturing_event)
    s3_uploader = S3Uploader()
    pressure_graph = PressureGraph(stop_event, x_data, y_data, led_off_countdown)  # Initialize PressureGraph

    # Start threads
    threads = [
        threading.Thread(target=pressure_monitor.run),
        threading.Thread(target=fingerprint_sensor.run),
        threading.Thread(target=image_capture.run),
        threading.Thread(target=pressure_graph.run),  # Start PressureGraph thread
    ]

    for thread in threads:
        thread.start()

    # Wait for the stop_event to be set
    stop_event.wait()

    # Once the event is stopped, ensure LEDs are turned off immediately
    led_control.turn_off()
    print("LEDs turned off due to event end.")

    # Wait for threads to complete
    for thread in threads:
        thread.join()

    # Save event data and upload to S3
    s3_uploader.upload_event_data(image_capture.image_filenames, fingerprint_sensor.user_info)

    # Cleanup resources
    cleanup_resources(led_control, pressure_monitor)

if __name__ == "__main__":
    main()
