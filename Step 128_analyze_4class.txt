import os
import sys
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image

# Define categories and device
categories = ['CLE', 'STO', 'TPI', 'URI']
device = torch.device("cpu")  # Force the use of CPU

# Print the current device being used
print(f"Using device: {device}")

# Define data preprocessing and augmentation
data_transforms = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# Load the model
def load_model(model_path):
    print("Loading model...")
    model = torch.load(model_path, map_location=device)  # Directly load the full model
    model = model.to(device)
    model.eval()
    print("Model loaded successfully.")
    return model

# Analyze the image
def analyze_image(model, image_path):
    print(f"Analyzing image: {image_path}")
    image = Image.open(image_path).convert('RGB')
    image = data_transforms(image).unsqueeze(0).to(device)
    
    with torch.no_grad():
        outputs = model(image)
        probabilities = torch.softmax(outputs, dim=1).cpu().numpy()[0]
        predicted_class = categories[outputs.argmax(dim=1).item()]
    
    print("Analysis complete.")
    return predicted_class, probabilities

def main():
    if len(sys.argv) < 2:
        print("Usage: python analyze_image_4class.py <image_path>")
        sys.exit(1)
    
    image_path = sys.argv[1]
    
    model_path = '/home/ec2-user/models/4class.pth'  # Path to the model
    model = load_model(model_path)
    
    try:
        predicted_class, probabilities = analyze_image(model, image_path)
        print(f"Image: {image_path}, Predicted Class: {predicted_class}")
        print("Class Probabilities:")
        for category, prob in zip(categories, probabilities):
            print(f"{category}: {prob:.4f}")
    except Exception as e:
        print(f"Error analyzing image {image_path}: {str(e)}")

if __name__ == "__main__":
    main()
