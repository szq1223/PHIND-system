import os
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, models, transforms
from torch.utils.data import DataLoader, random_split
from sklearn.metrics import confusion_matrix, classification_report
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Define data path
data_dir = 'C:/4Class'
categories = ['CLE', 'STO', 'URI', 'TPI']
batch_size = 32
num_epochs = 100
early_stopping_patience = 15
model_save_dir = 'C:/4Class'

# Data preprocessing and augmentation
data_transforms = {
    'train': transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.RandomRotation(30),
        transforms.RandomHorizontalFlip(),
        transforms.RandomVerticalFlip(),
        transforms.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.3, hue=0.3),
        transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),
        transforms.RandomErasing(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])  # Normalize
    ]),
    'val': transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),  # Convert to tensor
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])  # Normalize
    ]),
    'augment_uri': transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(45),
        transforms.ColorJitter(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.4),
        transforms.RandomAffine(degrees=0, translate=(0.2, 0.2)),
        transforms.RandomGrayscale(p=0.2),
        transforms.RandomErasing(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),
    ]),
}

# Load data
full_dataset = datasets.ImageFolder(root=data_dir, transform=data_transforms['train'])

# Split the dataset into training and validation sets (80-20 split)
train_size = int(0.8 * len(full_dataset))
val_size = len(full_dataset) - train_size
train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])

# Apply custom augmentation for URI class in training set
for i, (img_path, label) in enumerate(train_dataset.dataset.samples):
    if label == 2:  # URI class index
        train_dataset.dataset.samples[i] = (img_path, label)
        train_dataset.dataset.transform = data_transforms['augment_uri']

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)

# Focal Loss Implementation
class FocalLoss(nn.Module):
    def __init__(self, alpha=1, gamma=2, reduction='mean'):
        super(FocalLoss, self).__init__()
        self.alpha = alpha
        self.gamma = gamma
        self.reduction = reduction

    def forward(self, inputs, targets):
        BCE_loss = nn.CrossEntropyLoss()(inputs, targets)
        pt = torch.exp(-BCE_loss)
        F_loss = self.alpha * (1 - pt) ** self.gamma * BCE_loss

        if self.reduction == 'mean':
            return torch.mean(F_loss)
        else:
            return torch.sum(F_loss)

# Load EfficientNetB0 model
model = models.efficientnet_b0(weights=models.EfficientNet_B0_Weights.IMAGENET1K_V1)  # Load pre-trained weights
for param in model.parameters():
    param.requires_grad = True  # Unfreeze all layers

# Modify the fully connected layer to use for 4-class classification
num_ftrs = model.classifier[1].in_features
model.classifier = nn.Sequential(
    nn.Dropout(p=0.5),  # Add Dropout
    nn.Linear(num_ftrs, len(categories))  # Output size equals the number of classes
)
model = model.to(device)

# Adjust the learning rate scheduler and optimizer
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9, weight_decay=1e-4)
scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=10, eta_min=1e-5)

# Train and evaluate the model
def train_and_evaluate(model, train_loader, val_loader, criterion, optimizer, scheduler, num_epochs, early_stopping_patience):
    best_val_acc = 0.0
    no_improvement_epochs = 0
    best_test_preds = []
    best_test_labels = []
    train_acc_history = []
    val_acc_history = []

    for epoch in range(num_epochs):
        model.train()
        running_corrects = 0

        # Training phase
        for inputs, labels in tqdm(train_loader):
            inputs, labels = inputs.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            _, preds = torch.max(outputs, 1)
            running_corrects += torch.sum(preds == labels.data)

        train_acc = running_corrects.double() / len(train_loader.dataset)
        train_acc_history.append(train_acc.item())

        # Validation phase
        model.eval()
        val_running_corrects = 0
        val_preds = []
        val_labels_list = []

        with torch.no_grad():
            for inputs, labels in val_loader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = model(inputs)

                _, preds = torch.max(outputs, 1)
                val_running_corrects += torch.sum(preds == labels.data)
                val_preds.extend(preds.cpu().numpy())
                val_labels_list.extend(labels.cpu().numpy())

        val_acc = val_running_corrects.double() / len(val_loader.dataset)
        val_acc_history.append(val_acc.item())

        # Print loss and accuracy for each epoch
        print(f'Epoch {epoch + 1}/{num_epochs}, Train Acc: {train_acc:.4f}, Val Acc: {val_acc:.4f}')

        # Update learning rate
        scheduler.step()

        # Save the best model and its predictions
        if val_acc > best_val_acc:
            best_val_acc = val_acc
            best_test_preds = val_preds
            best_test_labels = val_labels_list
            # Save the complete model
            torch.save(model, os.path.join(model_save_dir, '4class.pth'))
            print(f"Best model saved: epoch {epoch + 1}")
            no_improvement_epochs = 0
        else:
            no_improvement_epochs += 1

        # Early stopping mechanism
        if no_improvement_epochs >= early_stopping_patience:
            print(f"Early stopping triggered at epoch {epoch + 1}")
            break

    # Plot the changes in training and validation accuracy
    plt.figure(figsize=(10, 5))
    plt.plot(range(1, len(train_acc_history) + 1), train_acc_history, label='Train Accuracy')
    plt.plot(range(1, len(val_acc_history) + 1), val_acc_history, label='Validation Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.title('Train and Validation Accuracy over Epochs')
    plt.legend()
    plt.savefig(os.path.join(model_save_dir, 'train_val_accuracy.png'))
    plt.show()

    return best_test_preds, best_test_labels

# Start training and evaluating the model
criterion = FocalLoss()  # Use Focal Loss instead of Cross-Entropy Loss
best_test_preds, best_test_labels = train_and_evaluate(model, train_loader, val_loader, criterion, optimizer, scheduler, num_epochs, early_stopping_patience)

# Compute the classification report and confusion matrix for the best model
cr = classification_report(best_test_labels, best_test_preds, target_names=categories, zero_division=1)
print("Classification Report:\n", cr)

# Plot confusion matrix
cm = confusion_matrix(best_test_labels, best_test_preds)
plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=categories, yticklabels=categories)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix for Best Model')
plt.savefig('C:/4Class/confusion_matrix_best_model.png')
plt.show()
