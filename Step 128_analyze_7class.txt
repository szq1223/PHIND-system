import torch
from torchvision import transforms
from PIL import Image
import sys

# Model file path
MODEL_PATH = '/home/ec2-user/models/7class.pth'

# Class names for BS1 to BS7 categories
CLASS_NAMES = ['BS1', 'BS2', 'BS3', 'BS4', 'BS5', 'BS6', 'BS7']

# Image preprocessing
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

def load_model():
    # Load the pre-trained model
    model = torch.load(MODEL_PATH, map_location=torch.device('cpu'))
    model.eval()
    return model

def predict_image(image_path, model):
    # Read the image and preprocess it
    image = Image.open(image_path).convert('RGB')
    image = transform(image).unsqueeze(0)  # Add batch dimension

    # Perform prediction
    with torch.no_grad():
        output = model(image)
        probabilities = torch.nn.functional.softmax(output[0], dim=0)
        predicted_class = CLASS_NAMES[probabilities.argmax().item()]

    return predicted_class, probabilities

def main(image_path):
    model = load_model()
    predicted_class, probabilities = predict_image(image_path, model)

    # Output the prediction results
    print(f"PredictedClass: {predicted_class}")
    for idx, prob in enumerate(probabilities):
        print(f"{CLASS_NAMES[idx]}: {prob.item():.4f}")

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Usage: python analyze_7class.py <image_path>")
        sys.exit(1)

    image_path = sys.argv[1]
    main(image_path)